import os
from math import log10
from Tools import timing, numpy_sieve, decompose_tout, fact, sum_digit, binary_search, max_path

os.chdir('/Users/maximin/Desktop/Euler/linked_files')


# %% Problem 1

def problem_1(n=1000):
    a, b, c = (n - 1) // 3, (n - 1) // 5, (n - 1) // 15
    s = a * (a + 1) * 3 + b * (b + 1) * 5 - c * (c + 1) * 15
    return s // 2


# %% Problem 2

def problem_2(lim=4 * 10 ** 6):
    a, b, s = 1, 1, 0
    while a < lim:
        if a % 2 == 0:
            s += a
        a, b = a + b, a
    return s


# %% Problem 3

def problem_3(n=600851475143):
    primes = numpy_sieve(10 ** 4)
    for p in primes[::-1]:
        if n % p == 0:
            return p


# %% Problem 4

def problem_4():
    def palindrome(n):
        s = str(n)
        return s == s[::-1]

    def loop(nb):
        maxi = 0
        for i in range(10 ** nb - 1, 0, -1):
            for j in range(i, 0, -1):
                if palindrome(i * j):
                    if maxi < i * j:
                        maxi = i * j
                    break
        return maxi

    # print(loop(2))
    return loop(3)


# %% Problem 5

def problem_5():
    return 16 * 9 * 5 * 7 * 11 * 13 * 17 * 19


# %% Problem 6

def problem_6(n=100):
    # we know that squares of the sum is n^2*(n+1)^2 / 4
    # and sum of the squares is n(n+1)(2*n+1) / 6
    # so the difference is n(n+1)/12 * ((n+1)*n*3 - 2*(2n+1))
    # that is n(n+1)/12 *(3n^2 - n - 2)
    s = n * (n + 1) * (n - 1) * (3 * n + 2)
    return s // 12


# %% Problem 7

def problem_7():
    primes = numpy_sieve(10 ** 5 + 5 * 10 ** 3)
    return primes[10 ** 4]


# %% Problem 8

big_n = "73167176531330624919225119674426574742355349194934\
96983520312774506326239578318016984801869478851843\
85861560789112949495459501737958331952853208805511\
12540698747158523863050715693290963295227443043557\
66896648950445244523161731856403098711121722383113\
62229893423380308135336276614282806444486645238749\
30358907296290491560440772390713810515859307960866\
70172427121883998797908792274921901699720888093776\
65727333001053367881220235421809751254540594752243\
52584907711670556013604839586446706324415722155397\
53697817977846174064955149290862569321978468622482\
83972241375657056057490261407972968652414535100474\
82166370484403199890008895243450658541227588666881\
16427171479924442928230863465674813919123162824586\
17866458359124566529476545682848912883142607690042\
24219022671055626321111109370544217506941658960408\
07198403850962455444362981230987879927244284909188\
84580156166097919133875499200524063689912560717606\
05886116467109405077541002256983155200055935729725\
71636269561882670428252483600823257530420752963450"


def problem_8(nb=13, n=big_n):
    ln = len(n)
    a = 1
    i = 0
    while i < nb:
        a *= int(n[i])
        i += 1
    maxi = a
    while i < ln:
        s = int(n[i])
        if s == 0:
            a = 1
            ok = True
            for j in range(i + 1, i + 1 + nb):
                if j >= ln:
                    # print("maxi is ", maxi)
                    return maxi
                s2 = int(n[j])
                if s2 == 0:
                    i = j
                    ok = False
                    break
                a *= int(s2)
            if ok:
                if a > maxi:
                    maxi = a
                i += nb + 1
        else:
            a //= int(n[i - nb])
            a *= s
            maxi = max(maxi, a)
            i += 1
    # print("maxi is ", maxi)
    return maxi


# %% Problem 9

# we are looking for p > q > such that a, b, c = p**2 - q**2, 2*p*q, p**2+q**2
# so a + b + c = 2*p*(p+q)
# it appears that p = 20 and q = 5 works
# so we get a, b, c = 375, 200, 425 so abc = 31875000

def problem_9():
    return 31875000


# %% Problem 10

def problem_10(n=2 * 10 ** 6):
    primes = numpy_sieve(n)
    return sum(primes)


# %% Problem 11

def problem_11():
    grid = [[8, 2, 22, 97, 38, 15, 0, 40, 0, 75, 4, 5, 7, 78, 52, 12, 50, 77, 91, 8],
            [49, 49, 99, 40, 17, 81, 18, 57, 60, 87, 17, 40, 98, 43, 69, 48, 4, 56, 62, 0],
            [81, 49, 31, 73, 55, 79, 14, 29, 93, 71, 40, 67, 53, 88, 30, 3, 49, 13, 36, 65],
            [52, 70, 95, 23, 4, 60, 11, 42, 69, 24, 68, 56, 1, 32, 56, 71, 37, 2, 36, 91],
            [22, 31, 16, 71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13, 80],
            [24, 47, 32, 60, 99, 3, 45, 2, 44, 75, 33, 53, 78, 36, 84, 20, 35, 17, 12, 50],
            [32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54, 70, 66, 18, 38, 64, 70],
            [67, 26, 20, 68, 2, 62, 12, 20, 95, 63, 94, 39, 63, 8, 40, 91, 66, 49, 94, 21],
            [24, 55, 58, 5, 66, 73, 99, 26, 97, 17, 78, 78, 96, 83, 14, 88, 34, 89, 63, 72],
            [21, 36, 23, 9, 75, 0, 76, 44, 20, 45, 35, 14, 0, 61, 33, 97, 34, 31, 33, 95],
            [78, 17, 53, 28, 22, 75, 31, 67, 15, 94, 3, 80, 4, 62, 16, 14, 9, 53, 56, 92],
            [16, 39, 5, 42, 96, 35, 31, 47, 55, 58, 88, 24, 0, 17, 54, 24, 36, 29, 85, 57],
            [86, 56, 0, 48, 35, 71, 89, 7, 5, 44, 44, 37, 44, 60, 21, 58, 51, 54, 17, 58],
            [19, 80, 81, 68, 5, 94, 47, 69, 28, 73, 92, 13, 86, 52, 17, 77, 4, 89, 55, 40],
            [4, 52, 8, 83, 97, 35, 99, 16, 7, 97, 57, 32, 16, 26, 26, 79, 33, 27, 98, 66],
            [88, 36, 68, 87, 57, 62, 20, 72, 3, 46, 33, 67, 46, 55, 12, 32, 63, 93, 53, 69],
            [4, 42, 16, 73, 38, 25, 39, 11, 24, 94, 72, 18, 8, 46, 29, 32, 40, 62, 76, 36],
            [20, 69, 36, 41, 72, 30, 23, 88, 34, 62, 99, 69, 82, 67, 59, 85, 74, 4, 36, 16],
            [20, 73, 35, 29, 78, 31, 90, 1, 74, 31, 49, 71, 48, 86, 81, 16, 23, 57, 5, 54],
            [1, 70, 54, 71, 83, 51, 54, 69, 16, 92, 33, 48, 61, 43, 52, 1, 89, 19, 67, 48]]

    l1, l2 = len(grid), len(grid[0])
    maxi = 0
    for i in range(l1):
        for j in range(l2):
            p = 1
            if i + 3 < l1:
                for k1 in range(i, i + 4):
                    p *= grid[k1][j]
                maxi = max(maxi, p)
                p = 1
                if j + 3 < l2:
                    for k in range(4):
                        p *= grid[i + k][j + k]
                    maxi = max(maxi, p)
                p = 1
                if j >= 3:
                    for k in range(4):
                        p *= grid[i + k][j - k]
                    maxi = max(maxi, p)
            p = 1
            if j + 3 < l2:
                for k2 in range(j, j + 4):
                    p *= grid[i][k2]
                maxi = max(maxi, p)
    return maxi  # sol = 70600674


# %% Problem 12

def problem_12():
    primes = numpy_sieve(100)

    def nb_div(n):
        l2 = decompose_tout(n, primes)
        a = 1
        for c in l2:
            a *= c[1] + 1
        return a

    i = 101
    nd1 = nb_div(100 / 2)
    nd2 = nb_div(101)
    while nd1 * nd2 < 500:
        i += 1
        nd1 = nd2
        j = i // 2 if i % 2 == 0 else i
        nd2 = nb_div(j)
    return (i * (i - 1)) // 2


# %% Problem 13

def problem_13():
    numbers = [37107287533902102798797998220837590246510135740250,
               46376937677490009712648124896970078050417018260538,
               74324986199524741059474233309513058123726617309629,
               91942213363574161572522430563301811072406154908250,
               23067588207539346171171980310421047513778063246676,
               89261670696623633820136378418383684178734361726757,
               28112879812849979408065481931592621691275889832738,
               44274228917432520321923589422876796487670272189318,
               47451445736001306439091167216856844588711603153276,
               70386486105843025439939619828917593665686757934951,
               62176457141856560629502157223196586755079324193331,
               64906352462741904929101432445813822663347944758178,
               92575867718337217661963751590579239728245598838407,
               58203565325359399008402633568948830189458628227828,
               80181199384826282014278194139940567587151170094390,
               35398664372827112653829987240784473053190104293586,
               86515506006295864861532075273371959191420517255829,
               71693888707715466499115593487603532921714970056938,
               54370070576826684624621495650076471787294438377604,
               53282654108756828443191190634694037855217779295145,
               36123272525000296071075082563815656710885258350721,
               45876576172410976447339110607218265236877223636045,
               17423706905851860660448207621209813287860733969412,
               81142660418086830619328460811191061556940512689692,
               51934325451728388641918047049293215058642563049483,
               62467221648435076201727918039944693004732956340691,
               15732444386908125794514089057706229429197107928209,
               55037687525678773091862540744969844508330393682126,
               18336384825330154686196124348767681297534375946515,
               80386287592878490201521685554828717201219257766954,
               78182833757993103614740356856449095527097864797581,
               16726320100436897842553539920931837441497806860984,
               48403098129077791799088218795327364475675590848030,
               87086987551392711854517078544161852424320693150332,
               59959406895756536782107074926966537676326235447210,
               69793950679652694742597709739166693763042633987085,
               41052684708299085211399427365734116182760315001271,
               65378607361501080857009149939512557028198746004375,
               35829035317434717326932123578154982629742552737307,
               94953759765105305946966067683156574377167401875275,
               88902802571733229619176668713819931811048770190271,
               25267680276078003013678680992525463401061632866526,
               36270218540497705585629946580636237993140746255962,
               24074486908231174977792365466257246923322810917141,
               91430288197103288597806669760892938638285025333403,
               34413065578016127815921815005561868836468420090470,
               23053081172816430487623791969842487255036638784583,
               11487696932154902810424020138335124462181441773470,
               63783299490636259666498587618221225225512486764533,
               67720186971698544312419572409913959008952310058822,
               95548255300263520781532296796249481641953868218774,
               76085327132285723110424803456124867697064507995236,
               37774242535411291684276865538926205024910326572967,
               23701913275725675285653248258265463092207058596522,
               29798860272258331913126375147341994889534765745501,
               18495701454879288984856827726077713721403798879715,
               38298203783031473527721580348144513491373226651381,
               34829543829199918180278916522431027392251122869539,
               40957953066405232632538044100059654939159879593635,
               29746152185502371307642255121183693803580388584903,
               41698116222072977186158236678424689157993532961922,
               62467957194401269043877107275048102390895523597457,
               23189706772547915061505504953922979530901129967519,
               86188088225875314529584099251203829009407770775672,
               11306739708304724483816533873502340845647058077308,
               82959174767140363198008187129011875491310547126581,
               97623331044818386269515456334926366572897563400500,
               42846280183517070527831839425882145521227251250327,
               55121603546981200581762165212827652751691296897789,
               32238195734329339946437501907836945765883352399886,
               75506164965184775180738168837861091527357929701337,
               62177842752192623401942399639168044983993173312731,
               32924185707147349566916674687634660915035914677504,
               99518671430235219628894890102423325116913619626622,
               73267460800591547471830798392868535206946944540724,
               76841822524674417161514036427982273348055556214818,
               97142617910342598647204516893989422179826088076852,
               87783646182799346313767754307809363333018982642090,
               10848802521674670883215120185883543223812876952786,
               71329612474782464538636993009049310363619763878039,
               62184073572399794223406235393808339651327408011116,
               66627891981488087797941876876144230030984490851411,
               60661826293682836764744779239180335110989069790714,
               85786944089552990653640447425576083659976645795096,
               66024396409905389607120198219976047599490197230297,
               64913982680032973156037120041377903785566085089252,
               16730939319872750275468906903707539413042652315011,
               94809377245048795150954100921645863754710598436791,
               78639167021187492431995700641917969777599028300699,
               15368713711936614952811305876380278410754449733078,
               40789923115535562561142322423255033685442488917353,
               44889911501440648020369068063960672322193204149535,
               41503128880339536053299340368006977710650566631954,
               81234880673210146739058568557934581403627822703280,
               82616570773948327592232845941706525094512325230608,
               22918802058777319719839450180888072429661980811197,
               77158542502016545090413245809786882778948721859617,
               72107838435069186155435662884062257473692284509516,
               20849603980134001723930671666823555245252804609722,
               53503534226472524250874054075591789781264330331690]

    s = 0
    for i in numbers:
        s += i // 10 ** 39
    return int(s.__str__()[:10])


# %% Problem 14

# Todo: not fast enough ??
def problem_14():
    c_len = {}  # contains lengths of Collatz sequences

    def len_u(n):  # using some memoization technic.
        if n == 1:
            return 1
        elif n in c_len:
            return c_len[n]
        else:
            if n % 2 == 0:
                n >>= 1
            else:
                n += (n << 1) + 1
            a = 1 + len_u(n)
            c_len[n] = a
            return a

    maxi = 0
    i_maxi = -1
    for i in range(10 ** 6 - 1, 10000, -1):
        d = len_u(i)
        if maxi < d:
            maxi = d
            i_maxi = i
    return i_maxi


# %% Problem 15

def problem_15():  # cPn(40, 20) is the result
    p1, p2 = 1, 1
    for i in range(1, 21):
        p1 *= 20 + i
        p2 *= i
    return p1 // p2


# %% Problem 16

def problem_16():
    return sum_digit(2 ** 1000)


# %% Problem 17

def problem_17():
    l_c = [0, 3, 3, 5, 4, 4, 3, 5, 5, 4]
    l_b = [0, 0, 6, 6, 5, 5, 5, 7, 6, 6]
    l_a = [0, 13, 13, 15, 14, 14, 13, 15, 15, 14]
    l_a_00 = [0, 10, 10, 12, 11, 11, 10, 12, 12, 11]
    l_b_1 = [3, 6, 6, 8, 8, 7, 7, 9, 8, 8]

    def count(*abc):
        a1, a2, a3 = abc
        nb = 0
        if a2 == 1:
            nb += l_b_1[a3]
        else:
            nb += l_b[a2]
            nb += l_c[a3]
        if (a2, a3) == (0, 0):
            nb += l_a_00[a1]
        else:
            nb += l_a[a1]
        return nb

    nb_letters = 0
    for a in range(0, 10):
        for b in range(0, 10):
            for c in range(0, 10):
                nb_letters += count(a, b, c)
    nb_letters += 11  # one thousand ...

    return nb_letters


# %% Problem 18


def problem_18():
    trig = [[75],
            [95, 64],
            [17, 47, 82],
            [18, 35, 87, 10],
            [20, 4, 82, 47, 65],
            [19, 1, 23, 75, 3, 34],
            [88, 2, 77, 73, 7, 63, 67],
            [99, 65, 4, 28, 6, 16, 70, 92],
            [41, 41, 26, 56, 83, 40, 80, 70, 33],
            [41, 48, 72, 33, 47, 32, 37, 16, 94, 29],
            [53, 71, 44, 65, 25, 43, 91, 52, 97, 51, 14],
            [70, 11, 33, 28, 77, 73, 17, 78, 39, 68, 17, 57],
            [91, 71, 52, 38, 17, 14, 91, 43, 58, 50, 27, 29, 48],
            [63, 66, 4, 68, 89, 53, 67, 30, 73, 16, 69, 87, 40, 31],
            [4, 62, 98, 27, 23, 9, 70, 98, 73, 93, 38, 53, 60, 4, 23]]
    return max_path(trig)


# %% Problem 19

# Why would one just compute 1200/7 to find the number of first days of the month
#  that fell on a Sunday in 100 years?
# There are 1200 first days of the month in 100 years, as there are 1200 months.
# One in every 7 days is a Sunday.
# There is enough regularity to make things essentially nonrandom.
# Of course this argument gets one an approximate answer only."""


def problem_19():
    return 1200 // 7


# %% Problem 20

def problem_20():
    return sum_digit(fact(99))


# %% Problem 21
def problem_21():
    d_n = [1] * 10000  # d_n will contain the values of d(n)
    for i in range(2, 10000):
        for j in range(2 * i, 10000, i):
            d_n[j] += i

    s = 0
    for a in range(2, 10 ** 4):
        b = d_n[a]
        if 10 ** 4 > b > a:
            if d_n[b] == a:
                s += a + b
    return s  # sol = 31626


# %% Problem 22
# todo ?
def problem_22():
    def code(name):
        n = 0
        for j in name:
            n += (ord(j) - 64)
        return n

    with open('p022_names.txt', 'r') as f:
        names = []
        s = f.__next__()
        for i in s.split(","):
            names.append(i[1:-1])
    names.sort()
    nb = 1
    tot = 0
    for i in names:
        tot += code(i) * nb
        nb += 1
    return tot


# %% Problem 23
# TODO ? : more than 1 sec... Can it be faster ? ... I think not :-(

def problem_23():
    s_div = [1] * 28124
    for i in range(2, 28124):
        for j in range(2 * i, 28124, i):
            s_div[j] += i
    l_abundant = [i for i in range(1, 28124) if s_div[i] > i]

    s = 23 * 12
    l2 = [True] * 28124
    for i, a in enumerate(l_abundant):
        for b in l_abundant[i:]:
            if a + b >= 28124:
                break
            l2[a + b] = False
        if 2 * a >= 28124:
            break
    for i in range(25, 28124):
        if l2[i]:
            s += i
    return s


# %% Problem 24

def problem_24():
    l_fact = [1, 1]
    p = 1
    for i in range(2, 10):
        p *= i
        l_fact.append(p)

    def aux(l_d, lim):
        n = len(l_d) - 1
        a, j = 0, 0
        c = l_fact[n]
        while a < lim:
            a += c
            j += 1
        return l_d[j - 1], l_d[:j - 1] + l_d[j:], a - c

    l_left = list(range(10))
    l2 = ""
    s = 0
    for _ in range(9):
        digit, l_left, s2 = aux(l_left, 10 ** 6 - s)
        l2 += str(digit)
        s += s2
    l2 += str(l_left[0])
    return l2


# %% Problem 25

def problem_25():  # Fn = 1/sqrt(5)*(phi1^n + (-phi1)^-n)
    phi1 = (1 + 5 ** 0.5) / 2
    i = (999 + log10(5) * 1 / 2) / log10(phi1)
    return int(i) + 1


# %% Problem 26

def problem_26():
    def period(m):
        n, prod = 1, 10
        while prod != 1:
            n += 1
            prod = (prod * 10) % m
        return n

    pm, maxi = -1, 0
    for p in range(999, 950, -2):
        if p % 5 == 0:
            continue
        d = period(p)
        if d > maxi:
            maxi = d
            pm = p
    return pm


# %% Problem 27

# with (n-p)^2+n-p+41 = n^2-(2p-1)n+p^2-p+41
# we get |2p-1|<1000 and |p^2-p+41|<1000
# so -30<=p<=31

def problem_27():
    primes = numpy_sieve(10 ** 4)

    def f(p):
        return lambda m: m ** 2 - (2 * p - 1) * m + p ** 2 - p + 41

    maxi, pm = 0, -1
    for q in range(-30, 32):
        phi = f(q)
        n = 0
        while binary_search(primes, phi(n))[0]:
            n += 1
        if n > maxi:
            maxi = n
            pm = q
    return (1 - 2 * pm) * (pm ** 2 - pm + 41)


# %% Problem 28

def problem_28():
    def f(n):
        return 1 + 2 * (n * (8 * n ** 2 + 15 * n + 13)) // 3

    return f(500)


# %% Problem 29
def problem_29():
    s = 99 * 99
    s -= 49 + (32 + 17) + (24 + 25 + 9)  # 3**(k*b)
    s -= 49 + 49 + 49 + 49  # 5, 6, 7, 10
    s -= 49 + (32 + 17) + (24 + 25 + 9) + (19 + 20 + 7 + 2) + (62 + 0)  # 4**(k*b)
    return s


# %% Problems 1 to 29

if __name__ == "__main__":
    @timing
    def problem_1_to_29():
        for i in range(1, 30):
            print("p" + str(i) + ": ", end="")
            print(eval("problem_" + str(i) + "()"))


    problem_1_to_29()  # Execution of  problem_1_to_29  in  < 4.5 s
